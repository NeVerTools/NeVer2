{
  "Verification strategy": {
    "SSLP": {
      "params": {
        "Abstraction heuristic": {
          "name": "heuristic",
          "value": "Complete",
          "allowed": "[Complete,Approximate,Mixed]",
          "type": "str",
          "description": "The algorithm employed for the abstract propagation. Complete performs exact abstract interpretation, Approximate performs incomplete abstract interpretation and Mixed_N refine N neurons per layer"
        },
        "Neurons to refine per layer": {
          "name": "neurons_to_refine",
          "value": "1",
          "type": "int",
          "description": "Number of neurons to refine exactly in each layer when using the Mixed heuristic"
        },
        "Non-linear approximation levels": {
          "name": "approx_levels",
          "value": "1",
          "type": "int",
          "description": "Level of approximation for sigmoid-like functions, corresponding to the number of separation points in the triangular approximation"
        }
      }
    },
    "SSBP": {
      "params": {
        "Refinement heuristic": {
          "name": "heuristic",
          "value": "Sequential",
          "allowed": "[Sequential,Lowest approximation,Lowest approximation in layer,Input bounds change]",
          "type": "str",
          "description": "Branching heuristic to employ in the refinement. Sequential refinement refines each neuron in the order they appear in the network; Lowest approx selects the neuron that contributes with the lowest approximation; Lowest approx - current layer selects the neuron that contributes with the lowest approximation in the layer; Input bounds change selects the neuron that contributes most to change the input bounds when refined"
        },
        "Bounds propagation": {
          "name": "bounds",
          "value": "Symbolic",
          "allowed": "[Symbolic]",
          "type": "str",
          "description": "Bounds propagation backend"
        },
        "Bounds direction": {
          "name": "bounds_direction",
          "value": "Backwards",
          "allowed": "[Forwards,Backwards]",
          "type": "str",
          "description": "Bounds propagation direction of computations"
        },
        "Intersection strategy": {
          "name": "intersection",
          "value": "Adaptive",
          "allowed": "[Star LP,Adaptive]",
          "type": "str",
          "description": "Strategy to compute the intersection. Adaptive is faster, Star LP is more precise"
        },
        "Timeout": {
          "name": "timeout",
          "value": "300",
          "type": "int",
          "description": "Stop criteria for the algorithm in seconds"
        }
      }
    }
  }
}